====== Testing full stack requests ======


See Yehuda Katz's [[http://www.slideshare.net/wycats/testing-merb-presentation|presentation slides]] from [[http://merbcamp.com|MerbCamp]].

Mocking and stubbing are frowned upon by the core team when it comes to request testing, here is an example of how to test a controller and views going through the entire stack.

A blog post by [[http://atmos.org/index.php/2008/11/29/merb-10-controller-testing/|atmos]] explains the concepts and rationale behind this style of testing. 

===== Model =====

<code RUBY>
class Article
  include DataMapper::Resource
  
  property :id, Serial

  property :title, String
  property :author, String
  property :created_at, DateTime

  validates_present :title
end
</code>

===== Controller =====

<code RUBY>
class Articles < Application
  # provides :xml, :yaml, :js

  def index
    @articles = Article.all
    display @articles
  end

  def show(id)
    @article = Article.get(id)
    raise NotFound unless @article
    display @article
  end

  def new
    only_provides :html
    @article = Article.new
    display @article
  end

  def edit(id)
    only_provides :html
    @article = Article.get(id)
    raise NotFound unless @article
    display @article
  end

  def create(article)
    @article = Article.new(article)
    if @article.save
      redirect resource(@article), :message => {:notice => "Article was successfully created"}
    else
      message[:error] = "Article failed to be created"
      render :new
    end
  end

  def update(id, article)
    @article = Article.get(id)
    raise NotFound unless @article
    if @article.update_attributes(article)
       redirect resource(@article)
    else
      display @article, :edit
    end
  end

  def destroy(id)
    @article = Article.get(id)
    raise NotFound unless @article
    if @article.destroy
      redirect resource(:articles)
    else
      raise InternalServerError
    end
  end

end # Articles
</code>

===== Request Specs =====

<code RUBY>
require File.join(File.dirname(__FILE__), '..', 'spec_helper.rb')

given "an article exists" do
  Article.all.destroy!
  request(resource(:articles), :method => "POST", 
    :params => { :article => {:title => 'intro', :author => 'Matt'}})
end

describe "resource(:articles)" do
  describe "GET" do
    
    before(:each) do
      @response = request(resource(:articles))
    end
    
    it "responds successfully" do
      @response.should be_successful
    end

    it "contains a list of articles" do
      @response.should have_xpath("//ul")
    end
    
  end
  
  describe "GET", :given => "an article exists" do
    before(:each) do
      @response = request(resource(:articles))
    end
    
    it "has a list of articles" do
      @response.should have_xpath("//ul/li")
    end
  end
  
  describe "a successful POST" do
    before(:each) do
      Article.all.destroy!
      @response = request(resource(:articles), :method => "POST", 
        :params => { :article => {:title => 'intro', :author => 'Matt'}})
    end
    
    it "redirects to resource(:articles)" do
      @response.should redirect_to(resource(Article.first), :message => {:notice => "Article was successfully created"})
    end
    
  end
  
  describe "a failing POST" do
    before(:each) do
      @response = request(resource(:articles), :method => "POST", :params => { :article => { :title => nil}})
    end

    it "should re render the new action" do
      @response.body.include?("Articles controller, new action").should be_true
    end

    it "should have an error message" do
      @response.body.include?("Article failed to be created").should be_true
    end
  end
  
end

describe "resource(@article)" do 
  describe "a successful DELETE", :given => "an article exists" do
     before(:each) do
       @response = request(resource(Article.first), :method => "DELETE")
     end

     it "should redirect to the index action" do
       @response.should redirect_to(resource(:articles))
     end

   end
end

describe "resource(:articles, :new)" do
  before(:each) do
    @response = request(resource(:articles, :new))
  end
  
  it "responds successfully" do
    @response.should be_successful
  end
end

describe "resource(@article, :edit)", :given => "an article exists" do
  before(:each) do
    @response = request(resource(Article.first, :edit))
  end
  
  it "responds successfully" do
    @response.should be_successful
  end
end

describe "resource(@article)", :given => "an article exists" do
  
  describe "GET" do
    before(:each) do
      @response = request(resource(Article.first))
    end
  
    it "responds successfully" do
      @response.should be_successful
    end
  end
  
  describe "PUT" do
    before(:each) do
      @article = Article.first
      @response = request(resource(@article), :method => "PUT", 
        :params => { :article => {:title => "test"} })
    end
  
    it "redirect to the article show action" do
      @response.should redirect_to(resource(@article))
    end
  end

end
</code>

