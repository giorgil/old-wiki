a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1228089296;s:8:"modified";i:1228103784;}s:7:"creator";s:14:"Matt Aimonetti";s:11:"last_change";a:7:{s:4:"date";i:1228103784;s:2:"ip";s:13:"76.26.224.187";s:4:"type";s:1:"E";s:2:"id";s:16:"howto:cache:etag";s:4:"user";s:8:"mattetti";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:8:"mattetti";s:14:"Matt Aimonetti";}s:5:"title";s:16:"Cache validators";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:16:"cache_validators";s:5:"title";s:16:"Cache validators";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:395:"Check how this feature is implemented in merb-core (lib/merb-core/controller/mixins/conditional_get.rb)

Caching is tricky but here is a great read about HTTP caching, more precisely “reverse proxy caches”.

Basically the concept is to let the HTTP gateway cache know when a piece of content was modified so it can serve it without going through the entire stack. At least that's the theory.";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:4:{s:4:"date";a:2:{s:7:"created";i:1228089296;s:8:"modified";i:1228103784;}s:7:"creator";s:14:"Matt Aimonetti";s:11:"last_change";a:7:{s:4:"date";i:1228103784;s:2:"ip";s:13:"76.26.224.187";s:4:"type";s:1:"E";s:2:"id";s:16:"howto:cache:etag";s:4:"user";s:8:"mattetti";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:8:"mattetti";s:14:"Matt Aimonetti";}}}